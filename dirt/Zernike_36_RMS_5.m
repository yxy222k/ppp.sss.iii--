function [coef, ZernPoly,coefz] = Zernike_36_RMS_5(WaveFront, mask)

% yxy222k@gmail.com
% to imitate metropro

n = size(WaveFront,1);
x = linspace(-1,1,n);
y = linspace(1,-1,n);
[x,y] = meshgrid(x,y);

Z1=x.^0; %#ok<*NASGU> 
Z2=x;
Z3=y;
Z4=-1+2*(x.^2+y.^2);
Z5=x.^2-y.^2;
Z6=2*x.*y;
Z7=-2*x+3*x.*(x.^2+y.^2);
Z8=-2*y+3*y.*(x.^2+y.^2);
Z9=1-6*(x.^2+y.^2)+6*(x.^2+y.^2).^2;
Z10=x.^3-3*x.*y.^2;
Z11=3*x.^2.*y-y.^3;
Z12=-3*x.^2+3*y.^2+4*x.^2.*(x.^2+y.^2)-4*y.^2.*(x.^2+y.^2);
Z13=-6*x.*y+8*x.*y.*(x.^2+y.^2);
Z14=3*x-12*x.*(x.^2+y.^2)+10*x.*(x.^2+y.^2).^2;
Z15=3*y-12*y.*(x.^2+y.^2)+10*y.*(x.^2+y.^2).^2;
Z16=-1+12*(x.^2+y.^2)-30*(x.^2+y.^2).^2+20*(x.^2+y.^2).^3;
Z17=x.^4-6*x.^2.*y.^2+y.^4;
Z18=4*x.^3.*y-4*x.*y.^3;
Z19=-4*x.^3+12*x.*y.^2+5*x.^3.*(x.^2+y.^2)-15*x.*y.^2.*(x.^2+y.^2);
Z20=-12*x.^2.*y+4*y.^3+15*x.^2.*y.*(x.^2+y.^2)-5*y.^3.*(x.^2+y.^2);
Z21=6*x.^2-6*y.^2-20*x.^2.*(x.^2+y.^2)+20*y.^2.*(x.^2+y.^2)+15*x.^2.*(x.^2+y.^2).^2-15*y.^2.*(x.^2+y.^2).^2;
Z22=12*x.*y-40*x.*y.*(x.^2+y.^2)+30*x.*y.*(x.^2+y.^2).^2;
Z23=-4*x+30*x.*(x.^2+y.^2)-60*x.*(x.^2+y.^2).^2+35*x.*(x.^2+y.^2).^3;
Z24=-4*y+30*y.*(x.^2+y.^2)-60*y.*(x.^2+y.^2).^2+35*y.*(x.^2+y.^2).^3;
Z25=1-20*(x.^2+y.^2)+90*(x.^2+y.^2).^2-140*(x.^2+y.^2).^3+70*(x.^2+y.^2).^4;
Z26=x.^5-10*x.^3.*y.^2+5*x.*y.^4;
Z27=5*x.^4.*y-10*x.^2.*y.^3+y.^5;
Z28=-5*x.^4+30*x.^2.*y.^2-5*y.^4+6*x.^4.*(x.^2+y.^2)-36*x.^2.*y.^2.*(x.^2+y.^2)+6*y.^4.*(x.^2+y.^2);
Z29=-20*x.^3.*y+20*x.*y.^3+24*x.^3.*y.*(x.^2+y.^2)-24*x.*y.^3.*(x.^2+y.^2);
Z30=10*x.^3-30*x.*y.^2-30*x.^3.*(x.^2+y.^2)+90*x.*y.^2.*(x.^2+y.^2)+21*x.^3.*(x.^2+y.^2).^2-63*x.*y.^2.*(x.^2+y.^2).^2;
Z31=30*x.^2.*y-10*y.^3-90*x.^2.*y.*(x.^2+y.^2)+30*y.^3.*(x.^2+y.^2)+63*x.^2.*y.*(x.^2+y.^2).^2-21*y.^3.*(x.^2+y.^2).^2;
Z32=-10*x.^2+10*y.^2+60*x.^2.*(x.^2+y.^2)-60*y.^2.*(x.^2+y.^2)-105*x.^2.*(x.^2+y.^2).^2+105*y.^2.*(x.^2+y.^2).^2+56*x.^2.*(x.^2+y.^2).^3-56*y.^2.*(x.^2+y.^2).^3;
Z33=-20*x.*y+120*x.*y.*(x.^2+y.^2)-210*x.*y.*(x.^2+y.^2).^2+112*x.*y.*(x.^2+y.^2).^3;
Z34=5*x-60*x.*(x.^2+y.^2)+210*x.*(x.^2+y.^2).^2-280*x.*(x.^2+y.^2).^3+126*x.*(x.^2+y.^2).^4;
Z35=5*y-60*y.*(x.^2+y.^2)+210*y.*(x.^2+y.^2).^2-280*y.*(x.^2+y.^2).^3+126*y.*(x.^2+y.^2).^4;
Z36=-1+30*(x.^2+y.^2)-210*(x.^2+y.^2).^2+560.*(x.^2+y.^2).^3-630*(x.^2+y.^2).^4+252*(x.^2+y.^2).^5;
% Z(:,:,37)=1-42*(x.^2+y.^2)+420*(x.^2+y.^2).^2-1680.*(x.^2+y.^2).^3+3150*(x.^2+y.^2).^4-2772*(x.^2+y.^2).^5+924*(x.^2+y.^2).^6;

ZernPoly = zeros(n,n,36);%将36个zernike多项式存入n*n*36的矩阵中，n为横/纵向像素点数
for i = 1:36
    eval(['ZernPoly(:,:,i)=Z',num2str(i),'.*mask;'])
end

znr = zeros(n*n,36);%将三维矩阵降为二维矩阵。
for i = 1:36
    znr(:,i) = reshape(ZernPoly(:,:,i),[],1);
end

wf = reshape(WaveFront,[],1);%将待拟合波面重组，并存入列向量
coefz = (znr.'*znr)^-1*(znr.'*wf);%使用公式求解zernike系数

RecWF = zeros(n,n); %重构前4、9、16、25、36项系数，得到对应波面
for i = 1:36
    RecWF = RecWF + coefz(i,1)*ZernPoly(:,:,i);
    switch(i)
        case 4
            rms1 = mRMS(RecWF, WaveFront, mask);
        case 9
            rms2 = mRMS(RecWF, WaveFront, mask);
        case 16
            rms3 = mRMS(RecWF, WaveFront, mask);
        case 25
            rms4 = mRMS(RecWF, WaveFront, mask);
        case 36
            rms5 = mRMS(RecWF, WaveFront, mask);
    end
end


coef = zeros(5,12);
coef(1,1:4) = coefz(1:4);
coef(2,1:5) = coefz(5:9);
coef(3,1:7) = coefz(10:16);
coef(4,1:9) = coefz(17:25);
coef(5,1:11) = coefz(26:36);
coef(1,12) = rms1;
coef(2,12) = rms2;
coef(3,12) = rms3;
coef(4,12) = rms4;
coef(5,12) = rms5;
end

